/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AiAnalysis } from "./AiAnalysis";
import { AiAnalysisCountArgs } from "./AiAnalysisCountArgs";
import { AiAnalysisFindManyArgs } from "./AiAnalysisFindManyArgs";
import { AiAnalysisFindUniqueArgs } from "./AiAnalysisFindUniqueArgs";
import { CreateAiAnalysisArgs } from "./CreateAiAnalysisArgs";
import { UpdateAiAnalysisArgs } from "./UpdateAiAnalysisArgs";
import { DeleteAiAnalysisArgs } from "./DeleteAiAnalysisArgs";
import { EmailFindManyArgs } from "../../email/base/EmailFindManyArgs";
import { Email } from "../../email/base/Email";
import { Task } from "../../task/base/Task";
import { AiAnalysisService } from "../aiAnalysis.service";
@graphql.Resolver(() => AiAnalysis)
export class AiAnalysisResolverBase {
  constructor(protected readonly service: AiAnalysisService) {}

  async _aiAnalysesMeta(
    @graphql.Args() args: AiAnalysisCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AiAnalysis])
  async aiAnalyses(
    @graphql.Args() args: AiAnalysisFindManyArgs
  ): Promise<AiAnalysis[]> {
    return this.service.aiAnalyses(args);
  }

  @graphql.Query(() => AiAnalysis, { nullable: true })
  async aiAnalysis(
    @graphql.Args() args: AiAnalysisFindUniqueArgs
  ): Promise<AiAnalysis | null> {
    const result = await this.service.aiAnalysis(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AiAnalysis)
  async createAiAnalysis(
    @graphql.Args() args: CreateAiAnalysisArgs
  ): Promise<AiAnalysis> {
    return await this.service.createAiAnalysis({
      ...args,
      data: {
        ...args.data,

        task: args.data.task
          ? {
              connect: args.data.task,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AiAnalysis)
  async updateAiAnalysis(
    @graphql.Args() args: UpdateAiAnalysisArgs
  ): Promise<AiAnalysis | null> {
    try {
      return await this.service.updateAiAnalysis({
        ...args,
        data: {
          ...args.data,

          task: args.data.task
            ? {
                connect: args.data.task,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiAnalysis)
  async deleteAiAnalysis(
    @graphql.Args() args: DeleteAiAnalysisArgs
  ): Promise<AiAnalysis | null> {
    try {
      return await this.service.deleteAiAnalysis(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Email], { name: "emails" })
  async findEmails(
    @graphql.Parent() parent: AiAnalysis,
    @graphql.Args() args: EmailFindManyArgs
  ): Promise<Email[]> {
    const results = await this.service.findEmails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  async getTask(@graphql.Parent() parent: AiAnalysis): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
